{"ast":null,"code":"var _jsxFileName = \"/Users/geethakardahally/Desktop/Devaraj/Coding/JS_React/cal_client/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Inject, ScheduleComponent, ViewsDirective, ViewDirective, Day, Week, Month, Agenda, Resize, DragAndDrop } from '@syncfusion/ej2-react-schedule';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\n\nfunction App() {\n  const [events, setEvents] = useState([]);\n  const [calDataSource, setCalDataSource] = useState([]); //const[scheduleObj, setScheduleObj] = useState({});\n\n  var scheduleObj, currentEvent, currentSchedule;\n  var domain = 'http://localhost:3000/calendar/events';\n  /* const fetchData = () => {\n    fetch(\"http://localhost:3000/calendar\")\n      .then(response => response.json())\n      .then(res => {\n        console.log(\"Writing data\");\n        if (res && res.data) {\n          console.log(\"writing to entries\");\n          setEntries(res.data);\n        }\n      });\n  } */\n\n  const fetchEvents = () => {\n    fetch(\"http://localhost:3000/calendar/events\").then(response => response.json()).then(res => {\n      //alert(\"Results from server: \" + JSON.stringify(res.events));\n      if (res && res.events) {\n        setEvents(res.events);\n      }\n    });\n  }; //const addEventToServer = (eventData, scheduleObj) => {\n\n\n  const addEventToServer = eventData => {\n    //var id = eventData.id;\n    eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1;\n    fetch(domain, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(eventData)\n    }).then(() => {\n      scheduleObj.addEvent(eventData);\n      alert(\"added event to server\");\n    }).catch(alert(\"Error while adding event to server\"));\n    dialogClose();\n  }; //const updateEventToServer = (eventData, scheduleObj) => {\n\n\n  const updateEventToServer = (currentEvent, curSchedule) => {\n    const eventData = curSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    var id = currentEvent.Id; //currentEvent.Subject = \"test\";\n    //var bodyStr = JSON.stringify(currentEvent);\n\n    var bodyStr = JSON.stringify(eventData);\n    fetch(domain + '/?id=' + id, {\n      method: 'PUT',\n      headers: {\n        //   'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      //body: JSON.stringify(eventData)\n      body: bodyStr\n    }).then((err, data) => {\n      curSchedule.saveEvent(eventData);\n      alert(\"Updated event to server\");\n    }).catch(err => {\n      alert(\"Error while Updating event to server\");\n    });\n  }; //const deleteEventInServer = (eventData, scheduleObj) => {\n\n\n  const deleteEventInServer = eventData => {\n    var id = eventData.id;\n    fetch(domain + '/id=' + id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      scheduleObj.deleteEvent(eventData);\n      alert(\"Deleted event in server\");\n    }).catch(alert(\"Error while Deleting event to server\"));\n  };\n  /* const loadTempEvents = () => {\n    var coll = [];\n    coll.push(\n      { StartTime: new Date(2020, 4, 3, 8, 30),\n        EndTime: new Date(2020, 4,3, 10, 45)\n      });\n      coll.push(\n      { StartTime: new Date(2020, 4, 6, 8, 30),\n        EndTime: new Date(2020, 4, 6, 10, 45)\n      });\n      coll.push(\n        { StartTime: new Date(2020, 5, 3, 8, 30),\n        EndTime: new Date(2020, 5, 3, 10, 45)\n      });\n      setCalDataSource(coll);\n  } */\n\n  /* const renderEntries = () => {\n    if(entries.length <= 0){\n      return (<div>no entries available</div>);\n    } else {\n      return entries.map((val, key) => {\n        return <div key={key}>Day: {val.day}, Available: {val.available}</div>\n      });\n    }\n  } */\n  // const eventAdd = (e) => {\n  //   // var tes = currentSchedule;\n  //   // const data = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());\n  //   // const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   // eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1;\n  //   //const data = currentSchedule.getCellDetails(scheduleObj.getSelectedElements());\n  //   const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   eventData.Id = currentSchedule.eventBase.getEventMaxID() + 1;\n  //   //scheduleObj.addEvent(eventData);\n  //   alert(\"Event Data JSON: \" + JSON.stringify(eventData));\n  //   addEventToServer(eventData, currentSchedule);\n  //   dialogClose();\n  //   //alert(\"add Event called\");\n  // }\n  // const editEvent = (e)=> {\n  //   //alert(\"edit Event called\");\n  //   //const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   //eventData.Id = currentEvent.Id;\n  //   //scheduleObj.saveEvent(eventData);\n  //   //alert(\"Edit: Event Data JSON: \" + JSON.stringify(eventData));\n  //   //updateEventToServer(eventData, scheduleObj);\n  //   var tes = currentSchedule;\n  //   const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   //updateEventToServer(currentEvent, scheduleObj);\n  //   updateEventToServer(currentEvent, currentSchedule);\n  //   //console.log(eventData);\n  //   dialogClose();\n  // }\n\n\n  const addSyncfusionScheduler = () => {\n    //fetchEvents();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ButtonComponent, {\n      id: \"add\",\n      title: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }\n    }, \"Add\"), /*#__PURE__*/React.createElement(ButtonComponent, {\n      id: \"edit\",\n      title: \"Edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(ButtonComponent, {\n      id: \"delete\",\n      title: \"Delete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }\n    }, \"Delete\"), /*#__PURE__*/React.createElement(ScheduleComponent, {\n      currentView: \"Week\",\n      ref: schedule => scheduleObj = schedule,\n      eventSettings: {\n        dataSource: events\n      },\n      showQuickInfo: false,\n      popupOpen: openPopUp.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ViewsDirective, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Day\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Week\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(Inject, {\n      services: [Day, Week, Month, Agenda],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }\n    })));\n  };\n\n  const openPopUp = args => {\n    //alert(\"test\");\n    if (args.type === 'Editor' || args.type === 'QuickInfo') {\n      currentSchedule = scheduleObj;\n      currentEvent = args.type === 'QuickInfo' ? scheduleObj.getEventDetails(args.target) : args.data;\n      let dialogObj = args.element.ej2_instances[0];\n      let buttons;\n\n      if (args.target.classList.contains('e-appointment')) {\n        //currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: {\n            content: 'SAVE',\n            isPrimary: true\n          },\n          click: editEvent.bind(this)\n        }, {\n          buttonModel: {\n            content: 'DELETE',\n            cssClass: 'e-event-delete'\n          },\n          click: eventDelete.bind(this)\n        }, {\n          buttonModel: {\n            content: 'CANCEL',\n            cssClass: 'e-event-cancel'\n          },\n          click: dialogClose.bind(this)\n        }];\n      } else {\n        //currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: {\n            content: 'SAVE',\n            isPrimary: true\n          },\n          click: eventAdd.bind(this)\n        }, {\n          buttonModel: {\n            content: 'CANCEL',\n            cssClass: 'e-event-cancel'\n          },\n          click: dialogClose.bind(this)\n        }];\n      }\n\n      dialogObj.buttons = buttons;\n      dialogObj.dataBind();\n    }\n  };\n\n  const eventDelete = e => {\n    var tes = currentSchedule;\n    alert(\"delete Event called\");\n    const eventData = scheduleObj.activeEventData.event; //scheduleObj.deleteEvent(eventData);\n\n    alert(\"Delete: Event Data JSON: \" + JSON.stringify(eventData));\n    deleteEventInServer(eventData, scheduleObj);\n    dialogClose();\n  };\n\n  const eventAdd = e => {\n    var tes = currentSchedule;\n    /* const data = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());\n    const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1; */\n    //const data = currentSchedule.getCellDetails(scheduleObj.getSelectedElements());\n\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = currentSchedule.eventBase.getEventMaxID() + 1; //scheduleObj.addEvent(eventData);\n\n    alert(\"Event Data JSON: \" + JSON.stringify(eventData));\n    addEventToServer(eventData, currentSchedule);\n    dialogClose(); //alert(\"add Event called\");\n  };\n\n  const editEvent = e => {\n    //alert(\"edit Event called\");\n    //const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    //eventData.Id = currentEvent.Id;\n    //scheduleObj.saveEvent(eventData);\n    //alert(\"Edit: Event Data JSON: \" + JSON.stringify(eventData));\n    //updateEventToServer(eventData, scheduleObj);\n    var tes = currentSchedule;\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog'); //updateEventToServer(currentEvent, scheduleObj);\n\n    updateEventToServer(currentEvent, currentSchedule); //console.log(eventData);\n\n    dialogClose();\n  };\n\n  const dialogClose = () => {\n    let dialogObj = document.querySelector('.e-schedule-dialog').ej2_instances[0];\n    dialogObj.hide();\n    alert(\" Event clsoed\");\n  };\n\n  fetchEvents();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }, addSyncfusionScheduler()));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/geethakardahally/Desktop/Devaraj/Coding/JS_React/cal_client/src/App.js"],"names":["React","useState","Inject","ScheduleComponent","ViewsDirective","ViewDirective","Day","Week","Month","Agenda","Resize","DragAndDrop","ButtonComponent","App","events","setEvents","calDataSource","setCalDataSource","scheduleObj","currentEvent","currentSchedule","domain","fetchEvents","fetch","then","response","json","res","addEventToServer","eventData","Id","eventBase","getEventMaxID","method","headers","body","JSON","stringify","addEvent","alert","catch","dialogClose","updateEventToServer","curSchedule","eventWindow","getObjectFromFormData","id","bodyStr","err","data","saveEvent","deleteEventInServer","deleteEvent","addSyncfusionScheduler","schedule","dataSource","openPopUp","bind","args","type","getEventDetails","target","dialogObj","element","ej2_instances","buttons","classList","contains","buttonModel","content","isPrimary","click","editEvent","cssClass","eventDelete","eventAdd","dataBind","e","tes","activeEventData","event","document","querySelector","hide"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {Inject, ScheduleComponent, ViewsDirective, ViewDirective, Day, Week, Month, Agenda, Resize, DragAndDrop} from '@syncfusion/ej2-react-schedule';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\n\nfunction App() {\n\n  const[events, setEvents] = useState([]);\n  const[calDataSource, setCalDataSource] = useState([]);\n  //const[scheduleObj, setScheduleObj] = useState({});\n\n  var scheduleObj, currentEvent, currentSchedule;\n  var domain = 'http://localhost:3000/calendar/events'\n\n  /* const fetchData = () => {\n    fetch(\"http://localhost:3000/calendar\")\n      .then(response => response.json())\n      .then(res => {\n        console.log(\"Writing data\");\n        if (res && res.data) {\n          console.log(\"writing to entries\");\n          setEntries(res.data);\n        }\n      });\n  } */\n\n  const fetchEvents = () => {\n    fetch(\"http://localhost:3000/calendar/events\")\n    .then(response => response.json())\n    .then(res => {\n      //alert(\"Results from server: \" + JSON.stringify(res.events));\n      if(res && res.events){\n        setEvents(res.events);\n      }\n    });\n  }\n\n  //const addEventToServer = (eventData, scheduleObj) => {\n    const addEventToServer = (eventData) => {\n    //var id = eventData.id;\n    eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1;\n    fetch(domain, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(eventData)\n    })\n    .then(() => {\n      scheduleObj.addEvent(eventData);\n      alert(\"added event to server\");\n    })\n    .catch(alert(\"Error while adding event to server\"));\n    dialogClose();\n  }\n\n  //const updateEventToServer = (eventData, scheduleObj) => {\n    const updateEventToServer = (currentEvent, curSchedule) => {\n    const eventData = curSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    var id = currentEvent.Id;\n    //currentEvent.Subject = \"test\";\n    //var bodyStr = JSON.stringify(currentEvent);\n    var bodyStr = JSON.stringify(eventData);\n    fetch(domain + '/?id='+id, {\n      method: 'PUT',\n       headers: {\n      //   'Accept': 'application/json',\n         'Content-Type': 'application/json'\n       },\n      //body: JSON.stringify(eventData)\n      body: bodyStr\n    })\n    .then((err, data) => {\n      curSchedule.saveEvent(eventData);\n      alert(\"Updated event to server\");\n    })\n    .catch((err) => {\n      alert(\"Error while Updating event to server\");\n    });\n  }\n\n  //const deleteEventInServer = (eventData, scheduleObj) => {\n    const deleteEventInServer = (eventData) => {\n    var id = eventData.id;\n    fetch(domain + '/id='+id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    .then(() => {\n      scheduleObj.deleteEvent(eventData);\n      alert(\"Deleted event in server\");\n    })\n    .catch(alert(\"Error while Deleting event to server\"));\n  }\n\n  /* const loadTempEvents = () => {\n    var coll = [];\n    coll.push(\n      { StartTime: new Date(2020, 4, 3, 8, 30),\n        EndTime: new Date(2020, 4,3, 10, 45)\n      });\n      coll.push(\n      { StartTime: new Date(2020, 4, 6, 8, 30),\n        EndTime: new Date(2020, 4, 6, 10, 45)\n      });\n      coll.push(\n        { StartTime: new Date(2020, 5, 3, 8, 30),\n        EndTime: new Date(2020, 5, 3, 10, 45)\n      });\n      setCalDataSource(coll);\n  } */\n\n  /* const renderEntries = () => {\n    if(entries.length <= 0){\n      return (<div>no entries available</div>);\n    } else {\n      return entries.map((val, key) => {\n        return <div key={key}>Day: {val.day}, Available: {val.available}</div>\n      });\n    }\n  } */\n\n  // const eventAdd = (e) => {\n  //   // var tes = currentSchedule;\n  //   // const data = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());\n  //   // const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   // eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1;\n  //   //const data = currentSchedule.getCellDetails(scheduleObj.getSelectedElements());\n  //   const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   eventData.Id = currentSchedule.eventBase.getEventMaxID() + 1;\n  //   //scheduleObj.addEvent(eventData);\n  //   alert(\"Event Data JSON: \" + JSON.stringify(eventData));\n  //   addEventToServer(eventData, currentSchedule);\n  //   dialogClose();\n  //   //alert(\"add Event called\");\n  // }\n\n  // const editEvent = (e)=> {\n  //   //alert(\"edit Event called\");\n  //   //const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   //eventData.Id = currentEvent.Id;\n  //   //scheduleObj.saveEvent(eventData);\n  //   //alert(\"Edit: Event Data JSON: \" + JSON.stringify(eventData));\n  //   //updateEventToServer(eventData, scheduleObj);\n  //   var tes = currentSchedule;\n  //   const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n  //   //updateEventToServer(currentEvent, scheduleObj);\n  //   updateEventToServer(currentEvent, currentSchedule);\n  //   //console.log(eventData);\n  //   dialogClose();\n  // }\n\n  \n  const addSyncfusionScheduler = () => {\n    //fetchEvents();\n    return (<div>\n      <ButtonComponent id='add' title='Add'>Add</ButtonComponent>\n      <ButtonComponent id='edit' title='Edit'>Edit</ButtonComponent>\n      <ButtonComponent id='delete' title='Delete' >Delete</ButtonComponent>\n      <ScheduleComponent currentView='Week' \n      ref={schedule => scheduleObj = schedule} \n      eventSettings={{dataSource: events}} \n      showQuickInfo={false} \n      popupOpen = {openPopUp.bind(this)} >\n      <ViewsDirective>\n        <ViewDirective option='Day' />\n        <ViewDirective option='Week' />\n        <ViewDirective option='Month' />\n      </ViewsDirective>\n      <Inject services={[Day, Week, Month, Agenda]} />\n      </ScheduleComponent>\n    </div>)\n  }\n\n  const openPopUp = (args) => {\n    //alert(\"test\");\n    if (args.type === 'Editor' || args.type === 'QuickInfo') {\n      currentSchedule = scheduleObj;\n      currentEvent = args.type === 'QuickInfo'? scheduleObj.getEventDetails(args.target) : args.data;\n      let dialogObj = (args.element).ej2_instances[0];\n      let buttons;\n      if (args.target.classList.contains('e-appointment')) {\n        //currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: { content: 'SAVE', isPrimary: true }, click: editEvent.bind(this)\n        }, {\n          buttonModel: { content: 'DELETE', cssClass: 'e-event-delete' }, click: eventDelete.bind(this)\n        },\n        {\n          buttonModel: { content: 'CANCEL', cssClass: 'e-event-cancel' }, click: dialogClose.bind(this)\n        }];\n      } else {\n        //currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: { content: 'SAVE', isPrimary: true }, click: eventAdd.bind(this)\n        }, {\n          buttonModel: { content: 'CANCEL', cssClass: 'e-event-cancel' }, click: dialogClose.bind(this)\n        }];\n      }\n      \n      dialogObj.buttons = buttons;\n      dialogObj.dataBind();\n    }\n  }\n\n  \n\n   const eventDelete = (e)=> {\n    var tes = currentSchedule;\n    alert(\"delete Event called\");\n    const eventData = scheduleObj.activeEventData.event;\n    //scheduleObj.deleteEvent(eventData);\n    alert(\"Delete: Event Data JSON: \" + JSON.stringify(eventData));\n    deleteEventInServer(eventData, scheduleObj);\n    dialogClose();\n  }\n\n  const eventAdd = (e) => {\n    var tes = currentSchedule;\n    /* const data = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());\n    const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1; */\n    //const data = currentSchedule.getCellDetails(scheduleObj.getSelectedElements());\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = currentSchedule.eventBase.getEventMaxID() + 1;\n    //scheduleObj.addEvent(eventData);\n    alert(\"Event Data JSON: \" + JSON.stringify(eventData));\n    addEventToServer(eventData, currentSchedule);\n    dialogClose();\n    //alert(\"add Event called\");\n  }\n\n  const editEvent = (e)=> {\n    //alert(\"edit Event called\");\n    //const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    //eventData.Id = currentEvent.Id;\n    //scheduleObj.saveEvent(eventData);\n    //alert(\"Edit: Event Data JSON: \" + JSON.stringify(eventData));\n    //updateEventToServer(eventData, scheduleObj);\n    var tes = currentSchedule;\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    //updateEventToServer(currentEvent, scheduleObj);\n    updateEventToServer(currentEvent, currentSchedule);\n    //console.log(eventData);\n    dialogClose();\n  }\n  const dialogClose = ()=> {\n    let dialogObj = (document.querySelector('.e-schedule-dialog')).ej2_instances[0];\n    dialogObj.hide();\n    alert(\" Event clsoed\");\n  }\n\n  fetchEvents();\n  return (\n    <div className=\"App\">\n      {/* <div>{renderEntries()}</div> */}\n      <div>{addSyncfusionScheduler()}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}