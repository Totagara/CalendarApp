{"ast":null,"code":"var _jsxFileName = \"/Users/geethakardahally/Desktop/Devaraj/Coding/JS_React/cal_client/src/App.js\";\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Inject, ScheduleComponent, ViewsDirective, ViewDirective, Day, Week, Month, Agenda, Resize, DragAndDrop } from '@syncfusion/ej2-react-schedule';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\n\nfunction App() {\n  const [events, setEvents] = useState([]);\n  const [calDataSource, setCalDataSource] = useState([]); //const[scheduleObj, setScheduleObj] = useState({});\n\n  var scheduleObj, currentEvent;\n  var domain = 'http://localhost:3000/calendar/events';\n  /* const fetchData = () => {\n    fetch(\"http://localhost:3000/calendar\")\n      .then(response => response.json())\n      .then(res => {\n        console.log(\"Writing data\");\n        if (res && res.data) {\n          console.log(\"writing to entries\");\n          setEntries(res.data);\n        }\n      });\n  } */\n\n  const fetchEvents = () => {\n    fetch(\"http://localhost:3000/calendar/events\").then(response => response.json()).then(res => {\n      //alert(\"Results from server: \" + JSON.stringify(res.events));\n      if (res && res.events) {\n        setEvents(res.events);\n      }\n    });\n  };\n\n  const addEventToServer = (event, scheduleObj) => {\n    var id = event.id;\n    fetch(domain + '/id=' + id, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(event)\n    }).then(() => {\n      scheduleObj.addEvent(eventData);\n      alert(\"added event to server\");\n    }).catch(alert(\"Error while adding event to server\"));\n  };\n  /* const loadTempEvents = () => {\n    var coll = [];\n    coll.push(\n      { StartTime: new Date(2020, 4, 3, 8, 30),\n        EndTime: new Date(2020, 4,3, 10, 45)\n      });\n      coll.push(\n      { StartTime: new Date(2020, 4, 6, 8, 30),\n        EndTime: new Date(2020, 4, 6, 10, 45)\n      });\n      coll.push(\n        { StartTime: new Date(2020, 5, 3, 8, 30),\n        EndTime: new Date(2020, 5, 3, 10, 45)\n      });\n      setCalDataSource(coll);\n  } */\n\n  /* const renderEntries = () => {\n    if(entries.length <= 0){\n      return (<div>no entries available</div>);\n    } else {\n      return entries.map((val, key) => {\n        return <div key={key}>Day: {val.day}, Available: {val.available}</div>\n      });\n    }\n  } */\n\n\n  const addSyncfusionScheduler = () => {\n    fetchEvents();\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ButtonComponent, {\n      id: \"add\",\n      title: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, \"Add\"), /*#__PURE__*/React.createElement(ButtonComponent, {\n      id: \"edit\",\n      title: \"Edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, \"Edit\"), /*#__PURE__*/React.createElement(ButtonComponent, {\n      id: \"delete\",\n      title: \"Delete\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, \"Delete\"), /*#__PURE__*/React.createElement(ScheduleComponent, {\n      currentView: \"Week\",\n      ref: schedule => scheduleObj = schedule,\n      eventSettings: {\n        dataSource: events\n      },\n      popupOpen: openPopUp.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ViewsDirective, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Day\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Week\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    })), /*#__PURE__*/React.createElement(Inject, {\n      services: [Day, Week, Month, Agenda],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    })));\n  };\n\n  const openPopUp = args => {\n    //alert(\"test\");\n    if (args.type === 'Editor') {\n      let dialogObj = args.element.ej2_instances[0];\n      let buttons;\n\n      if (args.target.classList.contains('e-appointment')) {\n        currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: {\n            content: 'SAVE',\n            isPrimary: true\n          },\n          click: editEvent.bind(this)\n        }, {\n          buttonModel: {\n            content: 'DELETE',\n            cssClass: 'e-event-delete'\n          },\n          click: eventDelete.bind(this)\n        }, {\n          buttonModel: {\n            content: 'CANCEL',\n            cssClass: 'e-event-cancel'\n          },\n          click: dialogClose.bind(this)\n        }];\n      } else {\n        buttons = [{\n          buttonModel: {\n            content: 'SAVE',\n            isPrimary: true\n          },\n          click: eventAdd.bind(this)\n        }, {\n          buttonModel: {\n            content: 'CANCEL',\n            cssClass: 'e-event-cancel'\n          },\n          click: dialogClose.bind(this)\n        }];\n      }\n\n      dialogObj.buttons = buttons;\n      dialogObj.dataBind();\n    }\n  };\n\n  const eventAdd = e => {\n    const data = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());\n    const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1; //scheduleObj.addEvent(eventData);\n\n    alert(\"Event Data JSON: \" + JSON.stringify(eventData));\n    addEventToServer(eventData, scheduleObj);\n    dialogClose(); //alert(\"add Event called\");\n  };\n\n  const eventDelete = e => {\n    alert(\"delete Event called\");\n    const eventData = scheduleObj.activeEventData.event;\n    scheduleObj.deleteEvent(eventData);\n    alert(\"Delete: Event Data JSON: \" + JSON.stringify(eventData));\n    dialogClose();\n  };\n\n  const editEvent = e => {\n    alert(\"edit Event called\");\n    const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = currentEvent.Id;\n    scheduleObj.saveEvent(eventData);\n    alert(\"Edit: Event Data JSON: \" + JSON.stringify(eventData));\n    console.log(eventData);\n    dialogClose();\n  };\n\n  const dialogClose = () => {\n    let dialogObj = document.querySelector('.e-schedule-dialog').ej2_instances[0];\n    dialogObj.hide();\n    alert(\" Event clsoed\");\n  }; //fetchEvents();\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, addSyncfusionScheduler()));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/geethakardahally/Desktop/Devaraj/Coding/JS_React/cal_client/src/App.js"],"names":["React","useState","Inject","ScheduleComponent","ViewsDirective","ViewDirective","Day","Week","Month","Agenda","Resize","DragAndDrop","ButtonComponent","App","events","setEvents","calDataSource","setCalDataSource","scheduleObj","currentEvent","domain","fetchEvents","fetch","then","response","json","res","addEventToServer","event","id","method","headers","body","JSON","stringify","addEvent","eventData","alert","catch","addSyncfusionScheduler","schedule","dataSource","openPopUp","bind","args","type","dialogObj","element","ej2_instances","buttons","target","classList","contains","getEventDetails","buttonModel","content","isPrimary","click","editEvent","cssClass","eventDelete","dialogClose","eventAdd","dataBind","e","data","getCellDetails","getSelectedElements","eventWindow","getObjectFromFormData","Id","eventBase","getEventMaxID","activeEventData","deleteEvent","saveEvent","console","log","document","querySelector","hide"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport {Inject, ScheduleComponent, ViewsDirective, ViewDirective, Day, Week, Month, Agenda, Resize, DragAndDrop} from '@syncfusion/ej2-react-schedule';\nimport { ButtonComponent } from '@syncfusion/ej2-react-buttons';\n\nfunction App() {\n\n  const[events, setEvents] = useState([]);\n  const[calDataSource, setCalDataSource] = useState([]);\n  //const[scheduleObj, setScheduleObj] = useState({});\n\n  var scheduleObj, currentEvent;\n  var domain = 'http://localhost:3000/calendar/events'\n\n  /* const fetchData = () => {\n    fetch(\"http://localhost:3000/calendar\")\n      .then(response => response.json())\n      .then(res => {\n        console.log(\"Writing data\");\n        if (res && res.data) {\n          console.log(\"writing to entries\");\n          setEntries(res.data);\n        }\n      });\n  } */\n\n  const fetchEvents = () => {\n    fetch(\"http://localhost:3000/calendar/events\")\n    .then(response => response.json())\n    .then(res => {\n      //alert(\"Results from server: \" + JSON.stringify(res.events));\n      if(res && res.events){\n        setEvents(res.events);\n      }\n    });\n  }\n\n  const addEventToServer = (event, scheduleObj) => {\n    var id = event.id;\n    fetch(domain + '/id='+id, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(event)\n    })\n    .then(() => {\n      scheduleObj.addEvent(eventData);\n      alert(\"added event to server\");\n    })\n    .catch(alert(\"Error while adding event to server\"));\n  }\n\n  /* const loadTempEvents = () => {\n    var coll = [];\n    coll.push(\n      { StartTime: new Date(2020, 4, 3, 8, 30),\n        EndTime: new Date(2020, 4,3, 10, 45)\n      });\n      coll.push(\n      { StartTime: new Date(2020, 4, 6, 8, 30),\n        EndTime: new Date(2020, 4, 6, 10, 45)\n      });\n      coll.push(\n        { StartTime: new Date(2020, 5, 3, 8, 30),\n        EndTime: new Date(2020, 5, 3, 10, 45)\n      });\n      setCalDataSource(coll);\n  } */\n\n  /* const renderEntries = () => {\n    if(entries.length <= 0){\n      return (<div>no entries available</div>);\n    } else {\n      return entries.map((val, key) => {\n        return <div key={key}>Day: {val.day}, Available: {val.available}</div>\n      });\n    }\n  } */\n\n  const addSyncfusionScheduler = () => {\n    fetchEvents();\n    return (<div>\n      <ButtonComponent id='add' title='Add'>Add</ButtonComponent>\n      <ButtonComponent id='edit' title='Edit'>Edit</ButtonComponent>\n      <ButtonComponent id='delete' title='Delete' >Delete</ButtonComponent>\n      <ScheduleComponent currentView='Week' \n      ref={schedule => scheduleObj = schedule} \n      eventSettings={{dataSource: events}} \n      popupOpen = {openPopUp.bind(this)} >\n      <ViewsDirective>\n        <ViewDirective option='Day' />\n        <ViewDirective option='Week' />\n        <ViewDirective option='Month' />\n      </ViewsDirective>\n      <Inject services={[Day, Week, Month, Agenda]} />\n      </ScheduleComponent>\n    </div>)\n  }\n\n  const openPopUp = (args) => {\n    //alert(\"test\");\n    if (args.type === 'Editor') {\n      let dialogObj = (args.element).ej2_instances[0];\n      let buttons;\n      if (args.target.classList.contains('e-appointment')) {\n        currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: { content: 'SAVE', isPrimary: true }, click: editEvent.bind(this)\n        }, {\n          buttonModel: { content: 'DELETE', cssClass: 'e-event-delete' }, click: eventDelete.bind(this)\n        },\n        {\n          buttonModel: { content: 'CANCEL', cssClass: 'e-event-cancel' }, click: dialogClose.bind(this)\n        }];\n      } else {\n        buttons = [{\n          buttonModel: { content: 'SAVE', isPrimary: true }, click: eventAdd.bind(this)\n        }, {\n          buttonModel: { content: 'CANCEL', cssClass: 'e-event-cancel' }, click: dialogClose.bind(this)\n        }];\n      }\n      dialogObj.buttons = buttons;\n      dialogObj.dataBind();\n    }\n  }\n\n  const eventAdd = (e) => {\n    const data = scheduleObj.getCellDetails(scheduleObj.getSelectedElements());\n    const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = scheduleObj.eventBase.getEventMaxID() + 1;\n    //scheduleObj.addEvent(eventData);\n    alert(\"Event Data JSON: \" + JSON.stringify(eventData));\n    addEventToServer(eventData, scheduleObj);\n    dialogClose();\n    //alert(\"add Event called\");\n  }\n\n  const eventDelete = (e)=> {\n    alert(\"delete Event called\");\n    const eventData = scheduleObj.activeEventData.event;\n    scheduleObj.deleteEvent(eventData);\n    alert(\"Delete: Event Data JSON: \" + JSON.stringify(eventData));\n    dialogClose();\n  }\n\n  const editEvent = (e)=> {\n    alert(\"edit Event called\");\n    const eventData = scheduleObj.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.Id = currentEvent.Id;\n    scheduleObj.saveEvent(eventData);\n    alert(\"Edit: Event Data JSON: \" + JSON.stringify(eventData));\n    console.log(eventData);\n    dialogClose();\n  }\n  const dialogClose = ()=> {\n    let dialogObj = (document.querySelector('.e-schedule-dialog')).ej2_instances[0];\n    dialogObj.hide();\n    alert(\" Event clsoed\");\n  }\n\n  //fetchEvents();\n  return (\n    <div className=\"App\">\n      {/* <div>{renderEntries()}</div> */}\n      <div>{addSyncfusionScheduler()}</div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}