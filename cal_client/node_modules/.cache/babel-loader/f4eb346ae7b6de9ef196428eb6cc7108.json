{"ast":null,"code":"var _jsxFileName = \"/Users/geethakardahally/Desktop/Devaraj/Coding/JS_React/CreateLearn/cal_client/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Inject, ScheduleComponent, ViewsDirective, ViewDirective, Day, Week, Month, Agenda } from '@syncfusion/ej2-react-schedule';\nimport { CalendarAdminBar } from './UserManagement';\n\nfunction App() {\n  const [events, setEvents] = useState([]);\n  const [currentUser, setCurrentUser] = useState(\"\");\n  const [usersList, setUsersList] = useState([]);\n  var scheduleObj, currentEvent, currentSchedule;\n  var domain = 'http://localhost:3000';\n  useEffect(() => {\n    var fetchPromise = fetchCurUser(currentUser);\n    fetchPromise.then(curUser => {\n      setCurrentUser(curUser);\n      fetchEvents(curUser);\n    });\n    console.log(\"Data fetched from server\");\n  }, [currentUser]);\n\n  const fetchCurUser = curUser => {\n    return new Promise((resolve, reject) => {\n      if (curUser) {\n        resolve(currentUser);\n      } else {\n        var usersPromise = fetchUsers();\n        usersPromise.then(firstUser => {\n          resolve(firstUser);\n        }).catch(err => {\n          console.log(err);\n          reject(null);\n        });\n      }\n    });\n  };\n\n  const fetchEvents = curUser => {\n    fetch(domain + \"/calendar/events?facultyId=\" + curUser).then(response => response.json()).then(resp => {\n      if (resp && resp.data) {\n        var events = generateEventsSource(resp.data);\n        setEvents(events);\n      }\n    }).catch(err => {\n      console.log(err);\n      setEvents([]);\n    });\n  };\n\n  const fetchUsers = () => {\n    return new Promise((resolve, reject) => {\n      fetch(domain + \"/users\").then(response => response.json()).then(resp => {\n        if (resp && resp.data) {\n          setUsersList(resp.data);\n          resolve(resp.data[0].id);\n        } else {\n          reject(\"No users data available\");\n        }\n      });\n    });\n  };\n  /* const fetchUsers = ()=> {\n    //fetch(\"http://localhost:3000/users\")\n    fetch(domain + \"/users\")\n    .then(response => response.json())\n    .then(resp => {\n      if(resp && resp.data){\n        //var usersList = setUsersList(resp.data);\n        setUsersList(resp.data);\n        //setEvents(events);\n      }\n    });\n  } */\n\n\n  const generateEventsSource = eventsColl => {\n    var events = [];\n    eventsColl.forEach(element => {\n      var event = {};\n      element.id && (event.Id = element.id);\n      element.end && (event.EndTime = new Date(element.end).toString());\n      element.start && (event.StartTime = new Date(element.start).toString());\n      element.subject && (event.Subject = element.subject);\n      element.location && (event.Location = element.location);\n      element.description && (event.Description = element.description);\n      element.isRecurring && (event.Repeat = true);\n      element.repeatPattern && (event.RecurrenceRule = element.repeatPattern);\n      events.push(event);\n    });\n    return events;\n  };\n\n  const getEventObject = eventData => {\n    var event = {};\n    eventData.id && (event.id = eventData.id);\n    eventData.EndTime && (event.end = new Date(eventData.EndTime).toString());\n    eventData.StartTime && (event.start = new Date(eventData.StartTime).toString());\n    eventData.Subject && (event.subject = eventData.Subject);\n    eventData.Location && (event.location = eventData.Location);\n    eventData.Description && (event.description = eventData.Description);\n    eventData.RecurrenceRule && (event.isRecurring = true);\n    eventData.RecurrenceRule && (event.repeatPattern = eventData.RecurrenceRule);\n    return event;\n  };\n\n  const validateDates = (startDateVal, endDateVal) => {\n    var isValid = true;\n\n    if (startDateVal == null || endDateVal == null || isNaN(Date.parse(startDateVal)) || isNaN(Date.parse(endDateVal))) {\n      alert(\"Invalid Date format.\");\n      isValid = false;\n    }\n\n    if (new Date(startDateVal) > new Date(endDateVal)) {\n      alert(\"Start date should not be greater than end date.\");\n      isValid = false;\n    }\n\n    return isValid;\n  };\n\n  const addEventToServer = (eventData, currentSchedule) => {\n    if (validateDates(eventData.StartTime, eventData.EndTime)) {\n      var eventObj = getEventObject(eventData); //use this to get until field value in a proper date format\n      //document.querySelector('.e-until-date').ej2_instances[0].value; \n\n      var eventBody = JSON.stringify(eventObj);\n      fetch(domain + \"/calendar/events?facultyId=\" + currentUser, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: eventBody\n      }).then(res => res.json()).then(resp => {\n        if (resp.status == 403) {\n          alert(\"Faculty not available for the selected date-time.\");\n        } else if (resp.status == 200) {\n          eventData.Id = resp.id;\n          currentSchedule.addEvent(eventData);\n        }\n      }).catch(err => {\n        console.log(\"Err: \" + err);\n      });\n      dialogClose();\n    }\n  };\n\n  const deleteEventInServer = eventData => {\n    var id = eventData.Id;\n    fetch(domain + '/calendar/events/' + id + \"?facultyId=\" + currentUser, {\n      method: 'DELETE'\n    }).then(res => res.json()).then(resp => {\n      if (resp && resp.status == 400) {\n        alert(resp.message);\n      } else if (resp && resp.status == 200) {\n        currentSchedule.deleteEvent(eventData);\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  /* const deleteEventInServer = (eventData) => {\n    var id = eventData.Id;\n    fetch(domain + '/events/id='+id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    .then((res) => {\n      currentSchedule.deleteEvent(eventData);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  } */\n\n\n  const updateEventToServer = (eventData, currentSchedule) => {\n    if (validateDates(eventData.StartTime, eventData.EndTime)) {\n      var id = currentEvent.Id;\n      var eventObj = getEventObject(eventData);\n      eventObj.id = id;\n      eventData.Id = id;\n      var eventBody = JSON.stringify(eventObj);\n      fetch(domain + '/calendar/events/' + id + \"?facultyId=\" + currentUser, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: eventBody\n      }).then(res => {\n        if (res.status == 403) {\n          alert(\"Faculty not available for the selected date-time.\");\n        } else {\n          currentSchedule.saveEvent(eventData);\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  };\n\n  const addSyncfusionScheduler = () => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ScheduleComponent, {\n      currentView: \"Week\",\n      ref: schedule => scheduleObj = schedule,\n      eventSettings: {\n        dataSource: events\n      },\n      showQuickInfo: false,\n      popupOpen: openPopUp.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ViewsDirective, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Day\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Week\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(ViewDirective, {\n      option: \"Month\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Inject, {\n      services: [Day, Week, Month, Agenda],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    })));\n  };\n\n  const openPopUp = args => {\n    if (args.type == 'RecurrenceAlert') {\n      //document.querySelector('.e-quick-alertok').hidden = true;\n      //document.getElementsByClassName(\"e-quick-dialog-occurrence-event\").hidden = true;\n      document.getElementsByClassName(\"e-quick-dialog-occurrence-event\")[0].ej2_instances[0].disabled = true; //e-quick-dialog-occurrence-event\n    }\n\n    if (args.type === 'Editor' || args.type === 'QuickInfo') {\n      currentSchedule = scheduleObj;\n      currentEvent = args.type === 'QuickInfo' ? scheduleObj.getEventDetails(args.target) : args.data;\n      let dialogObj = args.element.ej2_instances[0];\n      let buttons; //hide timezone and all day fields for now.\n\n      document.querySelector('.e-all-day-container').hidden = true;\n      document.querySelector('.e-time-zone-container').hidden = true;\n\n      if (args.target.classList.contains('e-appointment')) {\n        buttons = [{\n          buttonModel: {\n            content: 'SAVE',\n            isPrimary: true\n          },\n          click: editEvent.bind(this)\n        }, {\n          buttonModel: {\n            content: 'DELETE',\n            cssClass: 'e-event-delete'\n          },\n          click: eventDelete.bind(this)\n        }, {\n          buttonModel: {\n            content: 'CANCEL',\n            cssClass: 'e-event-cancel'\n          },\n          click: dialogClose.bind(this)\n        }];\n      } else {\n        //currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: {\n            content: 'SAVE',\n            isPrimary: true\n          },\n          click: eventAdd.bind(this)\n        }, {\n          buttonModel: {\n            content: 'CANCEL',\n            cssClass: 'e-event-cancel'\n          },\n          click: dialogClose.bind(this)\n        }];\n      }\n\n      dialogObj.buttons = buttons;\n      dialogObj.dataBind();\n    }\n  };\n\n  const eventDelete = e => {\n    var tes = currentSchedule;\n    const eventData = currentSchedule.activeEventData.event;\n    deleteEventInServer(eventData, currentSchedule);\n    dialogClose();\n  };\n\n  const eventAdd = e => {\n    var tes = currentSchedule;\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.RecurrenceRule = document.querySelector('.e-recurrenceeditor').ej2_instances[0].value;\n    addEventToServer(eventData, currentSchedule);\n    dialogClose();\n  };\n\n  const editEvent = e => {\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.RecurrenceRule = document.querySelector('.e-recurrenceeditor').ej2_instances[0].value;\n    updateEventToServer(eventData, currentSchedule);\n    dialogClose();\n  };\n\n  const dialogClose = () => {\n    let dialogObj = document.querySelector('.e-schedule-dialog').ej2_instances[0];\n    dialogObj.hide();\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CalendarAdminBar, {\n    currentUser: currentUser,\n    setCurrentUser: setCurrentUser,\n    usersList: usersList,\n    setUsersList: setUsersList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }\n  }, addSyncfusionScheduler()));\n} //use this for isBlock feature\n//https://ej2.syncfusion.com/aspnetmvc/documentation/schedule/appointments/?no-cache=1\n\n\nexport default App;","map":{"version":3,"sources":["/Users/geethakardahally/Desktop/Devaraj/Coding/JS_React/CreateLearn/cal_client/src/App.js"],"names":["React","useState","useEffect","Inject","ScheduleComponent","ViewsDirective","ViewDirective","Day","Week","Month","Agenda","CalendarAdminBar","App","events","setEvents","currentUser","setCurrentUser","usersList","setUsersList","scheduleObj","currentEvent","currentSchedule","domain","fetchPromise","fetchCurUser","then","curUser","fetchEvents","console","log","Promise","resolve","reject","usersPromise","fetchUsers","firstUser","catch","err","fetch","response","json","resp","data","generateEventsSource","id","eventsColl","forEach","element","event","Id","end","EndTime","Date","toString","start","StartTime","subject","Subject","location","Location","description","Description","isRecurring","Repeat","repeatPattern","RecurrenceRule","push","getEventObject","eventData","validateDates","startDateVal","endDateVal","isValid","isNaN","parse","alert","addEventToServer","eventObj","eventBody","JSON","stringify","method","headers","body","res","status","addEvent","dialogClose","deleteEventInServer","message","deleteEvent","updateEventToServer","saveEvent","addSyncfusionScheduler","schedule","dataSource","openPopUp","bind","args","type","document","getElementsByClassName","ej2_instances","disabled","getEventDetails","target","dialogObj","buttons","querySelector","hidden","classList","contains","buttonModel","content","isPrimary","click","editEvent","cssClass","eventDelete","eventAdd","dataBind","e","tes","activeEventData","eventWindow","getObjectFromFormData","value","hide"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Inject, ScheduleComponent, ViewsDirective, ViewDirective, Day, Week, Month, Agenda } from '@syncfusion/ej2-react-schedule';\nimport { CalendarAdminBar } from './UserManagement';\n\nfunction App() {\n  const [events, setEvents] = useState([]);\n  const [currentUser, setCurrentUser] = useState(\"\");\n  const [usersList, setUsersList] = useState([]);\n\n  var scheduleObj, currentEvent, currentSchedule;\n  var domain = 'http://localhost:3000';\n\n  useEffect(() => {\n    var fetchPromise = fetchCurUser(currentUser);\n    fetchPromise.then((curUser) => {\n      setCurrentUser(curUser);\n      fetchEvents(curUser);\n    });\n    console.log(\"Data fetched from server\");\n  }, [currentUser]);\n\n  const fetchCurUser = (curUser) => {\n    return new Promise((resolve, reject) => {\n      if (curUser) {\n        resolve(currentUser);\n      } else {\n        var usersPromise = fetchUsers();\n        usersPromise.then((firstUser) => {\n          resolve(firstUser);\n        })\n          .catch((err) => {\n            console.log(err);\n            reject(null);\n          });\n      }\n    });\n  }\n\n  \n\n  const fetchEvents = (curUser) => {\n    fetch(domain + \"/calendar/events?facultyId=\" + curUser)\n      .then(response => response.json())\n      .then(resp => {\n        if (resp && resp.data) {\n          var events = generateEventsSource(resp.data);\n          setEvents(events);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setEvents([]);\n      });\n  }\n\n  const fetchUsers = () => {\n    return new Promise((resolve, reject) => {\n      fetch(domain + \"/users\")\n        .then(response => response.json())\n        .then(resp => {\n          if (resp && resp.data) {\n            setUsersList(resp.data);\n            resolve(resp.data[0].id);\n          } else {\n            reject(\"No users data available\");\n          }\n        });\n    });\n  }\n\n\n  /* const fetchUsers = ()=> {\n    //fetch(\"http://localhost:3000/users\")\n    fetch(domain + \"/users\")\n    .then(response => response.json())\n    .then(resp => {\n      if(resp && resp.data){\n        //var usersList = setUsersList(resp.data);\n        setUsersList(resp.data);\n        //setEvents(events);\n      }\n    });\n  } */\n\n  const generateEventsSource = (eventsColl) => {\n    var events = [];\n    eventsColl.forEach(element => {\n      var event = {};\n      element.id && (event.Id = element.id);\n      element.end && (event.EndTime = (new Date(element.end)).toString())\n      element.start && (event.StartTime = (new Date(element.start)).toString())\n      element.subject && (event.Subject = element.subject)\n      element.location && (event.Location = element.location)\n      element.description && (event.Description = element.description)\n      element.isRecurring && (event.Repeat = true)\n      element.repeatPattern && (event.RecurrenceRule = element.repeatPattern)\n      events.push(event);\n    });\n    return events;\n  }\n\n  const getEventObject = (eventData) => {\n    var event = {};\n    eventData.id && (event.id = eventData.id);\n    eventData.EndTime && (event.end = (new Date(eventData.EndTime)).toString())\n    eventData.StartTime && (event.start = (new Date(eventData.StartTime)).toString())\n    eventData.Subject && (event.subject = eventData.Subject)\n    eventData.Location && (event.location = eventData.Location)\n    eventData.Description && (event.description = eventData.Description)\n    eventData.RecurrenceRule && (event.isRecurring = true)\n    eventData.RecurrenceRule && (event.repeatPattern = eventData.RecurrenceRule)\n    return event;\n  }\n\n  const validateDates = (startDateVal, endDateVal) => {\n    var isValid = true;\n\n    if (startDateVal == null || endDateVal == null || isNaN(Date.parse(startDateVal)) || isNaN(Date.parse(endDateVal))) {\n      alert(\"Invalid Date format.\");\n      isValid = false;\n    }\n\n    if (new Date(startDateVal) > new Date(endDateVal)) {\n      alert(\"Start date should not be greater than end date.\");\n      isValid = false;\n    }\n    return isValid;\n  }\n\n  const addEventToServer = (eventData, currentSchedule) => {\n    if (validateDates(eventData.StartTime, eventData.EndTime)) {\n      var eventObj = getEventObject(eventData);\n      //use this to get until field value in a proper date format\n      //document.querySelector('.e-until-date').ej2_instances[0].value; \n      var eventBody = JSON.stringify(eventObj);\n      fetch(domain + \"/calendar/events?facultyId=\" + currentUser, {\n        method: 'POST',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n        },\n        body: eventBody\n      })\n        .then(res => res.json())\n        .then((resp) => {\n          if (resp.status == 403) {\n            alert(\"Faculty not available for the selected date-time.\");\n          } else if (resp.status == 200) {\n            eventData.Id = resp.id;\n            currentSchedule.addEvent(eventData);\n          }\n        })\n        .catch((err) => {\n          console.log(\"Err: \" + err);\n        });\n      dialogClose();\n    }\n  }\n\n  const deleteEventInServer = (eventData) => {\n    var id = eventData.Id;\n    fetch(domain + '/calendar/events/' + id + \"?facultyId=\" + currentUser, {\n      method: 'DELETE',\n    })\n      .then(res => res.json())\n      .then((resp) => {\n        if (resp && resp.status == 400) {\n          alert(resp.message);\n        } else if (resp && resp.status == 200) {\n          currentSchedule.deleteEvent(eventData);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  /* const deleteEventInServer = (eventData) => {\n    var id = eventData.Id;\n    fetch(domain + '/events/id='+id, {\n      method: 'DELETE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      }\n    })\n    .then((res) => {\n      currentSchedule.deleteEvent(eventData);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  } */\n\n  const updateEventToServer = (eventData, currentSchedule) => {\n\n    if (validateDates(eventData.StartTime, eventData.EndTime)) {\n\n      var id = currentEvent.Id;\n      var eventObj = getEventObject(eventData);\n      eventObj.id = id;\n      eventData.Id = id;\n      var eventBody = JSON.stringify(eventObj);\n      fetch(domain + '/calendar/events/' + id + \"?facultyId=\" + currentUser, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: eventBody\n      })\n        .then((res) => {\n          if (res.status == 403) {\n            alert(\"Faculty not available for the selected date-time.\");\n          } else {\n            currentSchedule.saveEvent(eventData);\n          }\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    }\n  }\n\n  const addSyncfusionScheduler = () => {\n    return (<div>\n      <ScheduleComponent currentView='Week'\n        ref={schedule => scheduleObj = schedule}\n        eventSettings={{ dataSource: events }}\n        showQuickInfo={false}\n        popupOpen={openPopUp.bind(this)} >\n        <ViewsDirective>\n          <ViewDirective option='Day' />\n          <ViewDirective option='Week' />\n          <ViewDirective option='Month' />\n        </ViewsDirective>\n        <Inject services={[Day, Week, Month, Agenda]} />\n      </ScheduleComponent>\n    </div>)\n  }\n\n  const openPopUp = (args) => {\n\n    if (args.type == 'RecurrenceAlert') {\n      //document.querySelector('.e-quick-alertok').hidden = true;\n      //document.getElementsByClassName(\"e-quick-dialog-occurrence-event\").hidden = true;\n      document.getElementsByClassName(\"e-quick-dialog-occurrence-event\")[0].ej2_instances[0].disabled = true;\n      //e-quick-dialog-occurrence-event\n    }\n\n    if (args.type === 'Editor' || args.type === 'QuickInfo') {\n      currentSchedule = scheduleObj;\n      currentEvent = args.type === 'QuickInfo' ? scheduleObj.getEventDetails(args.target) : args.data;\n      let dialogObj = (args.element).ej2_instances[0];\n      let buttons;\n\n      //hide timezone and all day fields for now.\n      document.querySelector('.e-all-day-container').hidden = true;\n      document.querySelector('.e-time-zone-container').hidden = true;\n      if (args.target.classList.contains('e-appointment')) {\n        buttons = [{\n          buttonModel: { content: 'SAVE', isPrimary: true }, click: editEvent.bind(this)\n        }, {\n          buttonModel: { content: 'DELETE', cssClass: 'e-event-delete' }, click: eventDelete.bind(this)\n        },\n        {\n          buttonModel: { content: 'CANCEL', cssClass: 'e-event-cancel' }, click: dialogClose.bind(this)\n        }];\n      } else {\n        //currentEvent = scheduleObj.getEventDetails(args.target);\n        buttons = [{\n          buttonModel: { content: 'SAVE', isPrimary: true }, click: eventAdd.bind(this)\n        }, {\n          buttonModel: { content: 'CANCEL', cssClass: 'e-event-cancel' }, click: dialogClose.bind(this)\n        }];\n      }\n\n      dialogObj.buttons = buttons;\n      dialogObj.dataBind();\n    }\n  }\n\n  const eventDelete = (e) => {\n    var tes = currentSchedule;\n    const eventData = currentSchedule.activeEventData.event;\n    deleteEventInServer(eventData, currentSchedule);\n    dialogClose();\n  }\n\n  const eventAdd = (e) => {\n    var tes = currentSchedule;\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.RecurrenceRule = document.querySelector('.e-recurrenceeditor').ej2_instances[0].value;\n    addEventToServer(eventData, currentSchedule);\n    dialogClose();\n  }\n\n  const editEvent = (e) => {\n    const eventData = currentSchedule.eventWindow.getObjectFromFormData('e-schedule-dialog');\n    eventData.RecurrenceRule = document.querySelector('.e-recurrenceeditor').ej2_instances[0].value;\n    updateEventToServer(eventData, currentSchedule);\n    dialogClose();\n  }\n  const dialogClose = () => {\n    let dialogObj = (document.querySelector('.e-schedule-dialog')).ej2_instances[0];\n    dialogObj.hide();\n  }\n\n  return (\n    <>\n      {/* adwa version */}\n      {/* <CalendarAdminBar currentUser={currentUser} setCurrentUser={setCurrentUser} /> */}\n      <CalendarAdminBar currentUser={currentUser} setCurrentUser={setCurrentUser} usersList={usersList} setUsersList={setUsersList} />\n      {/* <div className=\"App\">\n        <UserDropDown/>\n        <AddUser/>\n        <AddWorkHours/>\n      </div> */}\n      <div>{addSyncfusionScheduler()}</div>\n    </>\n  );\n}\n\n//use this for isBlock feature\n//https://ej2.syncfusion.com/aspnetmvc/documentation/schedule/appointments/?no-cache=1\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}